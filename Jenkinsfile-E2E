/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

pipeline {
    agent {
        label 'xenial'
    }

    tools {
        jdk 'JDK 1.8 (latest)'
    }

    environment {
        MAVEN_OPTS = '-XX:+TieredCompilation -XX:TieredStopAtLevel=1 -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -XX:-UseGCOverheadLimit -Xmx3g'
    }

    stages {
        stage('Checkout Source Code') {
            steps {
                deleteDir()
                checkout scm
                sh 'git submodule update --init'
            }
        }

        stage('Prepare Distribution Package') {
            steps {
                // although these checks are done in ci-it, since they are lightweight/cheap
                // we're using them as a barrier here to filter out some invalid PRs (fast-fail)
                // thus save unnecessary E2E builds(which is expensive)
                sh './mvnw checkstyle:check apache-rat:check'
                sh './mvnw -Dcheckstyle.skip -Drat.skip -T2 -Dmaven.compile.fork -Dmaven.compiler.maxmem=3072 -DskipTests clean package'
                // Some of the tests will modify files in the distribution folder, e.g. cluster test will modify the application.yml
                // so we give each test a separate distribution folder here
                sh 'mkdir -p dist-for-single-node-service && tar -zxf dist/apache-skywalking-apm-bin.tar.gz -C dist-for-single-node-service'
                sh 'mkdir -p dist-for-cluster && tar -zxf dist/apache-skywalking-apm-bin.tar.gz -C dist-for-cluster'
                sh 'mkdir -p dist-for-agent-reboot && tar -zxf dist/apache-skywalking-apm-bin.tar.gz -C dist-for-agent-reboot'
            }
        }

        stage('Compile Test Codes') {
            steps {
                sh './mvnw -f test/e2e/pom.xml clean'
            }
        }

        stage('Run End-to-End Tests') {
            parallel {
                stage('Run Single Node Tests') {
                    steps {
                        sh './mvnw -Dbuild.id=${BUILD_ID} -f test/e2e/pom.xml -pl e2e-single-service -am verify'
                    }
                }

                stage('Run Cluster Tests (ES/ZK)') {
                    steps {
                        sh './mvnw -Dbuild.id=${BUILD_ID} -f test/e2e/pom.xml -pl e2e-cluster/test-runner -am verify'
                    }
                }

                stage('Run Agent Reboot Tests') {
                    steps {
                        sh './mvnw -Dbuild.id=${BUILD_ID} -f test/e2e/pom.xml -pl e2e-agent-reboot -am verify'
                    }
                }
            }
        }
    }

    post {
        always {
            // "Abort old build on update" will interrupt the job completely,
            // we need to clean up when there are containers started by the e2e tests
            sh 'docker ps'
            sh 'docker ps | grep -e "skywalking-e2e-container-${BUILD_ID}" | awk \'{print $1}\' | xargs --no-run-if-empty docker stop'
            sh 'docker ps | grep -e "skywalking-e2e-container-${BUILD_ID}" | awk \'{print $1}\' | xargs --no-run-if-empty docker rm'

            // Files created by docker container in the directories that are mounted from the host to
            // the container can not be deleted by `deleteDir()`, we need to mount it again and delete them
            // inside the container
            //
            // Delete all distribution folder
            sh 'docker run -v $(pwd):/sw alpine sleep 10 && rm -rf /sw/dist-for-cluster/* /sw/dist-for-single-node-service/* /sw/dist-for-agent-reboot/*'
            deleteDir()
        }
    }
}
